TODO:
  - manual ship placement
    - for a drag and drop system, calculate valid positions based on length, existing ships
    - while hovering, squares are green for valid, red for invalid
  - game over screen DONE
    - report winner DONE
    - lock out further moves DONE
      - already does this. secondaryBoard event listeners are only good for one turn and if the game is over, no selections can be made
    - restart button DONE
      - need to separate out reset tasks, call at beginning of game() DONE
  - cleanup UI
    - player/cpu title DONE
    - hit/miss CSS, animations?
    - report when ship is sunk, ship name DONE
      - currently console.log, build this into the UI DONE
    - sort out the game messages DONE
      - spacing is currently not correct DONE
    - need to outline ships for clarity DONE
    - pictures of ships under each player, show hits/sunk
    - abcdefgh 12345 DONE
  - disable ability to click on square that is already a hit DONE
    - currently a CPU ship can be sunk by clicking on a hit square until it sinks
  - smarter CPU DONE
    - create a set of legal choices for each ship node using a Map() DONE
      - example: for a horizontal patrolBoat starting at [4, 4] DONE
      - legalChoices.set([4, 4], [[3, 4], [4, 3], [5, 4]]) DONE
      - legalChoices.set([4, 5], [[3, 5], [4, 6], [5, 5]]) DONE
      - for each cpuTurn, remove legal choices for each ship that is not sunk DONE
      - then when a hit is made, add it to the currentShipHitArray DONE
        - as long as the currentShipHitArray is not empty, choose from legalChoices for that square DONE
        - if no more choices exist for that square, choose from remaining options in legalChoices DONE


Ship object
  - length: number
  - hits: number
  - sunk: boolean
  - hit()
    - increases the hit counter by 1
  - isSunk()
    - checks if hits >= length
  - horizontal boolean
  TODO:
    - hitsArray that records hit on the ship for CSS selecting DONE
      - make the actual DOM element is not clickable after a hit (disable button) DONE

Gameboard object
  - two boards per player
    - primary: arrange ships, record opponent shots
    - secondary: record self shots
  - create ships
  - place on board
  - ships array
    - keeps track of ships
    - buildShips
  - receiveAttack()
    - takes a pair of coords
    - determines if there's a hit
    - sends hit to the correct ship
    - keeps track of misses
  - allShipsSunk()
  TODO:
    - keep track of hits to lock those positions out from being selected (hitsArray) DONE
    - board collisions during manual ship placement
      - out of bounds and ship collision logic DONE
    - random ship placement DONE
      - random coordinate generator DONE

Player object
  - human or computer
  - each player gets a gameboard


Render Screen module
  - drawPrimaryBoard
  - drawSecondaryBoard

Event Listener module
  - square click events
  - drag and drop ship placement
  - turn loop
    - player chooses square
      - hit or miss
        - send info to all four boards
      - check for any/all ships sunk
        - where do these checks take place?
      - render boards
      - next turn
  - if all ships sunk
    - display win screen
    - reset game option




How to represent boards?
  I like this idea:
  https://www.geeksforgeeks.org/javascript/implementation-graph-javascript/

  - build the full gameboard as a map object
    - either build every node iteratively so we have access to the entire gameboard or
    - only build the nodes necessary, ie ships, hits, or misses. everything else is null
      - this way I could still build the UI with a CSS grid. empty nodes are null anyway
    - tried this, arrays as keys require iteration to compare so it seems expensive
      - tried JSON.stringify and .parse which required a change to the formatter to remove spaces from arrays
      - settled on using "01" or "46" as keys (row, col) but what's the point of that when I can use a 2D array
  - 2D array makes more sense
    - I will be addressing each position directly anyway so I don't need to use graph traversal for searching
    - easier to code with
      - currently this structure makes more sense to me but my desire to get more comfortable with graphs sent me down a frusrating rabbit hole with Map()

  - nodes? what data would a board node hold?
    - position - ex. [4, 6]
    - data
      - null - empty space, has not been chosen, does not have a ship
      - "miss"
        - primary board - opponent misses
        - secondary board - player misses
      - ship object
        - hit - part of a ship that has been hit
          - use hitsArray to store hits
          - primary board - opponent hits
          - secondary board - player hits
        - each node contains a reference to the same ship
          - ex. destroyer = Ship(2)
          - primaryBoard[5][1] = destroyer
          - primaryBoard[6][1] = destroyer
          - now if I make a change to to either node it will update both?
    - example node object:
      - { [4, 6]: destroyer }
  - Map() object?
    - map.set([4, 6], destroyer)
    - map.get([4, 6])
      - destroyer

  - I wonder if nodes/BST are necessary
    - Since it's only a 10x10 board, I could make an array of arrays (like PlantDaddy)
      - null - empty space
      - "miss"
      - ship object
    - or I stick with BST and traverse the nodes
      - get the coords
      - check for the coords in the tree
      - if not found, create the node, report a miss
      - if found, change the node data to a hit, report a hit

  - If I have a shipArray, I have a list of coordinates to loop through and check against the tile chosen
  - Then if a match is found:
    - send a hit to that ship
    - check if it's sunk
    - send hit message to all boards
  - If miss:
    - send miss message to all boards